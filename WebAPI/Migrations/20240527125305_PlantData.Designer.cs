// <auto-generated />
using System;
using DatabaseInterfacing.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Sep4Backend.Migrations
{
    [DbContext(typeof(PlantDbContext))]
    [Migration("20240527125305_PlantData")]
    partial class PlantData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WarningMax")
                        .HasColumnType("double precision");

                    b.Property<double>("WarningMin")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.PlantData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("AirCO2")
                        .HasColumnType("real")
                        .HasColumnName("airCo2");

                    b.Property<float?>("AirHumidity")
                        .HasColumnType("real")
                        .HasColumnName("airHumidity");

                    b.Property<float?>("AirTemperature")
                        .HasColumnType("real")
                        .HasColumnName("airTemperature");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date-time");

                    b.Property<float?>("DewPoint")
                        .HasColumnType("real")
                        .HasColumnName("dewPoint");

                    b.Property<float?>("LightLevel")
                        .HasColumnType("real")
                        .HasColumnName("lightLevel");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plant_name");

                    b.Property<float?>("VpdLevel")
                        .HasColumnType("real")
                        .HasColumnName("vpdLevel");

                    b.Property<float?>("WaterConductivity")
                        .HasColumnType("real")
                        .HasColumnName("waterConductivity");

                    b.Property<float?>("WaterFlow")
                        .HasColumnType("real")
                        .HasColumnName("waterFlow");

                    b.Property<float?>("WaterLevel")
                        .HasColumnType("real")
                        .HasColumnName("waterLevel");

                    b.Property<float?>("WaterPhLevel")
                        .HasColumnType("real")
                        .HasColumnName("waterPh");

                    b.Property<float?>("WaterTemperature")
                        .HasColumnType("real")
                        .HasColumnName("waterTemperature");

                    b.HasKey("Id");

                    b.ToTable("plant_data");
                });

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("template");
                });

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.Parameter", b =>
                {
                    b.HasOne("DatabaseInterfacing.Domain.EntityFramework.Template", "Template")
                        .WithMany("Parameters")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DatabaseInterfacing.Domain.EntityFramework.Template", b =>
                {
                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
